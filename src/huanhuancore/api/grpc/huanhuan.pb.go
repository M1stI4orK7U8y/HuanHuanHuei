// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/huanhuancore/api/grpc/huanhuan.proto

package huanhuan

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	reply "gitlab.com/packtumi9722/huanhuanhuei/src/database/api/grpc/reply"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenType int32

const (
	TokenType_BTC   TokenType = 0
	TokenType_ETH   TokenType = 1
	TokenType_ERC20 TokenType = 2
)

var TokenType_name = map[int32]string{
	0: "BTC",
	1: "ETH",
	2: "ERC20",
}

var TokenType_value = map[string]int32{
	"BTC":   0,
	"ETH":   1,
	"ERC20": 2,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_89bd64f88c09226b, []int{0}
}

type HuanHuanRequest struct {
	From                 TokenType `protobuf:"varint,1,opt,name=from,proto3,enum=api.grpc.huanhuan.TokenType" json:"from,omitempty"`
	FromTxid             string    `protobuf:"bytes,2,opt,name=fromTxid,proto3" json:"fromTxid,omitempty"`
	To                   TokenType `protobuf:"varint,3,opt,name=to,proto3,enum=api.grpc.huanhuan.TokenType" json:"to,omitempty"`
	Receiver             string    `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HuanHuanRequest) Reset()         { *m = HuanHuanRequest{} }
func (m *HuanHuanRequest) String() string { return proto.CompactTextString(m) }
func (*HuanHuanRequest) ProtoMessage()    {}
func (*HuanHuanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd64f88c09226b, []int{0}
}

func (m *HuanHuanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuanHuanRequest.Unmarshal(m, b)
}
func (m *HuanHuanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuanHuanRequest.Marshal(b, m, deterministic)
}
func (m *HuanHuanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuanHuanRequest.Merge(m, src)
}
func (m *HuanHuanRequest) XXX_Size() int {
	return xxx_messageInfo_HuanHuanRequest.Size(m)
}
func (m *HuanHuanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HuanHuanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HuanHuanRequest proto.InternalMessageInfo

func (m *HuanHuanRequest) GetFrom() TokenType {
	if m != nil {
		return m.From
	}
	return TokenType_BTC
}

func (m *HuanHuanRequest) GetFromTxid() string {
	if m != nil {
		return m.FromTxid
	}
	return ""
}

func (m *HuanHuanRequest) GetTo() TokenType {
	if m != nil {
		return m.To
	}
	return TokenType_BTC
}

func (m *HuanHuanRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.grpc.huanhuan.TokenType", TokenType_name, TokenType_value)
	proto.RegisterType((*HuanHuanRequest)(nil), "api.grpc.huanhuan.HuanHuanRequest")
}

func init() {
	proto.RegisterFile("src/huanhuancore/api/grpc/huanhuan.proto", fileDescriptor_89bd64f88c09226b)
}

var fileDescriptor_89bd64f88c09226b = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x2e, 0x4a, 0xd6,
	0xcf, 0x28, 0x4d, 0xcc, 0x03, 0xe1, 0xe4, 0xfc, 0xa2, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xf4,
	0xa2, 0x02, 0x84, 0xa8, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x60, 0x62, 0x41, 0xa6, 0x1e,
	0x48, 0x42, 0x0f, 0x26, 0x21, 0xa5, 0x0e, 0xd2, 0x9c, 0x92, 0x58, 0x92, 0x98, 0x94, 0x58, 0x8c,
	0xa4, 0xb1, 0x28, 0xb5, 0x20, 0xa7, 0x12, 0x42, 0x42, 0xf4, 0x2a, 0xad, 0x64, 0xe4, 0xe2, 0xf7,
	0x28, 0x4d, 0xcc, 0x03, 0xe1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x03, 0x2e, 0x96,
	0xb4, 0xa2, 0xfc, 0x5c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x19, 0x3d, 0x0c, 0xe3, 0xf5,
	0x42, 0xf2, 0xb3, 0x53, 0xf3, 0x42, 0x2a, 0x0b, 0x52, 0x83, 0xc0, 0x2a, 0x85, 0xa4, 0xb8, 0x38,
	0x40, 0x74, 0x48, 0x45, 0x66, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0xa4,
	0xc3, 0xc5, 0x54, 0x92, 0x2f, 0xc1, 0x4c, 0x84, 0x59, 0x4c, 0x25, 0xf9, 0x20, 0x93, 0x8a, 0x52,
	0x93, 0x53, 0x33, 0xcb, 0x52, 0x8b, 0x24, 0x58, 0x20, 0x26, 0xc1, 0xf8, 0x5a, 0x1a, 0x5c, 0x9c,
	0x70, 0xc5, 0x42, 0xec, 0x5c, 0xcc, 0x4e, 0x21, 0xce, 0x02, 0x0c, 0x20, 0x86, 0x6b, 0x88, 0x87,
	0x00, 0xa3, 0x10, 0x27, 0x17, 0xab, 0x6b, 0x90, 0xb3, 0x91, 0x81, 0x00, 0x93, 0x51, 0x28, 0x17,
	0x87, 0x07, 0xd4, 0x7c, 0x21, 0x4f, 0x2e, 0x2e, 0x97, 0x7c, 0x98, 0x17, 0x85, 0x94, 0xb0, 0xb8,
	0x00, 0xcd, 0xff, 0x52, 0xa2, 0x08, 0x35, 0x90, 0xa0, 0x0a, 0x02, 0x91, 0x4a, 0x0c, 0x4e, 0x5c,
	0x51, 0x1c, 0x30, 0x4d, 0x49, 0x6c, 0xe0, 0xf0, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x16,
	0x91, 0xe6, 0xae, 0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HuanhuanClient is the client API for Huanhuan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HuanhuanClient interface {
	DoHuanHuan(ctx context.Context, in *HuanHuanRequest, opts ...grpc.CallOption) (*reply.Reply, error)
}

type huanhuanClient struct {
	cc *grpc.ClientConn
}

func NewHuanhuanClient(cc *grpc.ClientConn) HuanhuanClient {
	return &huanhuanClient{cc}
}

func (c *huanhuanClient) DoHuanHuan(ctx context.Context, in *HuanHuanRequest, opts ...grpc.CallOption) (*reply.Reply, error) {
	out := new(reply.Reply)
	err := c.cc.Invoke(ctx, "/api.grpc.huanhuan.Huanhuan/DoHuanHuan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HuanhuanServer is the server API for Huanhuan service.
type HuanhuanServer interface {
	DoHuanHuan(context.Context, *HuanHuanRequest) (*reply.Reply, error)
}

// UnimplementedHuanhuanServer can be embedded to have forward compatible implementations.
type UnimplementedHuanhuanServer struct {
}

func (*UnimplementedHuanhuanServer) DoHuanHuan(ctx context.Context, req *HuanHuanRequest) (*reply.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoHuanHuan not implemented")
}

func RegisterHuanhuanServer(s *grpc.Server, srv HuanhuanServer) {
	s.RegisterService(&_Huanhuan_serviceDesc, srv)
}

func _Huanhuan_DoHuanHuan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HuanHuanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuanhuanServer).DoHuanHuan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.huanhuan.Huanhuan/DoHuanHuan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuanhuanServer).DoHuanHuan(ctx, req.(*HuanHuanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Huanhuan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.grpc.huanhuan.Huanhuan",
	HandlerType: (*HuanhuanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoHuanHuan",
			Handler:    _Huanhuan_DoHuanHuan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/huanhuancore/api/grpc/huanhuan.proto",
}
