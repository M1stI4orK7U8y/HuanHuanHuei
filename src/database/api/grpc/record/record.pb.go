// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/database/api/grpc/record/record.proto

package record

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	record "gitlab.com/packtumi9722/huanhuanhuei/src/database/model/record"
	reply "gitlab.com/packtumi9722/huanhuanhuei/src/database/model/reply"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RecordDatum struct {
	Record               *record.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RecordDatum) Reset()         { *m = RecordDatum{} }
func (m *RecordDatum) String() string { return proto.CompactTextString(m) }
func (*RecordDatum) ProtoMessage()    {}
func (*RecordDatum) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4ee1032e7149269, []int{0}
}

func (m *RecordDatum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordDatum.Unmarshal(m, b)
}
func (m *RecordDatum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordDatum.Marshal(b, m, deterministic)
}
func (m *RecordDatum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordDatum.Merge(m, src)
}
func (m *RecordDatum) XXX_Size() int {
	return xxx_messageInfo_RecordDatum.Size(m)
}
func (m *RecordDatum) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordDatum.DiscardUnknown(m)
}

var xxx_messageInfo_RecordDatum proto.InternalMessageInfo

func (m *RecordDatum) GetRecord() *record.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type RecordData struct {
	Records              []*record.Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RecordData) Reset()         { *m = RecordData{} }
func (m *RecordData) String() string { return proto.CompactTextString(m) }
func (*RecordData) ProtoMessage()    {}
func (*RecordData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4ee1032e7149269, []int{1}
}

func (m *RecordData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordData.Unmarshal(m, b)
}
func (m *RecordData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordData.Marshal(b, m, deterministic)
}
func (m *RecordData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordData.Merge(m, src)
}
func (m *RecordData) XXX_Size() int {
	return xxx_messageInfo_RecordData.Size(m)
}
func (m *RecordData) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordData.DiscardUnknown(m)
}

var xxx_messageInfo_RecordData proto.InternalMessageInfo

func (m *RecordData) GetRecords() []*record.Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type RecordID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordID) Reset()         { *m = RecordID{} }
func (m *RecordID) String() string { return proto.CompactTextString(m) }
func (*RecordID) ProtoMessage()    {}
func (*RecordID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4ee1032e7149269, []int{2}
}

func (m *RecordID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordID.Unmarshal(m, b)
}
func (m *RecordID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordID.Marshal(b, m, deterministic)
}
func (m *RecordID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordID.Merge(m, src)
}
func (m *RecordID) XXX_Size() int {
	return xxx_messageInfo_RecordID.Size(m)
}
func (m *RecordID) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordID.DiscardUnknown(m)
}

var xxx_messageInfo_RecordID proto.InternalMessageInfo

func (m *RecordID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RecordIDs struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordIDs) Reset()         { *m = RecordIDs{} }
func (m *RecordIDs) String() string { return proto.CompactTextString(m) }
func (*RecordIDs) ProtoMessage()    {}
func (*RecordIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4ee1032e7149269, []int{3}
}

func (m *RecordIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordIDs.Unmarshal(m, b)
}
func (m *RecordIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordIDs.Marshal(b, m, deterministic)
}
func (m *RecordIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordIDs.Merge(m, src)
}
func (m *RecordIDs) XXX_Size() int {
	return xxx_messageInfo_RecordIDs.Size(m)
}
func (m *RecordIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordIDs.DiscardUnknown(m)
}

var xxx_messageInfo_RecordIDs proto.InternalMessageInfo

func (m *RecordIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordDatum)(nil), "api.grpc.record.RecordDatum")
	proto.RegisterType((*RecordData)(nil), "api.grpc.record.RecordData")
	proto.RegisterType((*RecordID)(nil), "api.grpc.record.RecordID")
	proto.RegisterType((*RecordIDs)(nil), "api.grpc.record.RecordIDs")
}

func init() {
	proto.RegisterFile("src/database/api/grpc/record/record.proto", fileDescriptor_c4ee1032e7149269)
}

var fileDescriptor_c4ee1032e7149269 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xde, 0x6d, 0xa1, 0xee, 0x4e, 0x45, 0x65, 0xf0, 0x50, 0xa3, 0x42, 0x09, 0x22, 0x0a, 0x92,
	0x40, 0x3d, 0xea, 0xa9, 0x2c, 0x16, 0xaf, 0x01, 0x2f, 0xde, 0xd2, 0x4d, 0x90, 0x40, 0xcb, 0x86,
	0x24, 0x1e, 0x7c, 0x5a, 0x5f, 0x45, 0x76, 0x93, 0x5d, 0xf0, 0x67, 0xbd, 0x4c, 0x92, 0xf9, 0x7e,
	0x26, 0x33, 0x03, 0xb7, 0xde, 0xd5, 0x5c, 0xc9, 0x20, 0xb7, 0xd2, 0x6b, 0x2e, 0xad, 0xe1, 0x6f,
	0xce, 0xd6, 0xdc, 0xe9, 0xba, 0x71, 0x2a, 0x1d, 0xcc, 0xba, 0x26, 0x34, 0x78, 0x2c, 0xad, 0x61,
	0x2d, 0xca, 0x62, 0x9a, 0x5c, 0x7d, 0xd3, 0xee, 0x1b, 0xa5, 0x77, 0xdc, 0x69, 0xbb, 0xfb, 0x88,
	0x31, 0xca, 0xc8, 0xf5, 0x9f, 0xac, 0x5f, 0xf6, 0xf4, 0x01, 0xe6, 0xa2, 0x7b, 0x57, 0x32, 0xbc,
	0xef, 0xf1, 0x0e, 0x66, 0x11, 0x5e, 0xe4, 0xcb, 0xfc, 0x66, 0xbe, 0x3a, 0x65, 0x9d, 0x34, 0xd5,
	0x66, 0x91, 0x2a, 0x12, 0x87, 0x3e, 0x02, 0x0c, 0x62, 0x89, 0x0c, 0x0e, 0x62, 0xde, 0x2f, 0xf2,
	0xe5, 0x74, 0x54, 0xdc, 0x93, 0x28, 0x81, 0x22, 0xa6, 0x9e, 0x2b, 0x3c, 0x82, 0x89, 0x89, 0x35,
	0x4b, 0x31, 0x31, 0x8a, 0x5e, 0x42, 0xd9, 0x63, 0x1e, 0x4f, 0x60, 0x6a, 0x92, 0x69, 0x29, 0xda,
	0xeb, 0xea, 0x33, 0x87, 0xa2, 0x4a, 0xcd, 0xe1, 0x13, 0x94, 0x1b, 0x1d, 0x22, 0x1d, 0xcf, 0xd8,
	0x8f, 0x79, 0xb1, 0xde, 0x87, 0x5c, 0x8c, 0x40, 0x5d, 0xe7, 0x34, 0xc3, 0x0d, 0xc0, 0xe0, 0xe3,
	0x91, 0x8c, 0x1a, 0x79, 0x72, 0x3e, 0xee, 0x24, 0x69, 0x86, 0x6b, 0x38, 0x7c, 0xb1, 0x4a, 0x06,
	0x9d, 0xfe, 0xf4, 0x6f, 0x61, 0x82, 0xc3, 0x94, 0xda, 0xed, 0x89, 0x36, 0xd2, 0x6c, 0x5d, 0xbc,
	0xa6, 0x21, 0x6f, 0x67, 0xdd, 0xa2, 0xee, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x80, 0xd0, 0xfa,
	0xac, 0x34, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	GetRecord(ctx context.Context, in *RecordID, opts ...grpc.CallOption) (*RecordDatum, error)
	GetRecords(ctx context.Context, in *RecordIDs, opts ...grpc.CallOption) (*RecordData, error)
	UpdateRecord(ctx context.Context, in *RecordDatum, opts ...grpc.CallOption) (*reply.Reply, error)
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetRecord(ctx context.Context, in *RecordID, opts ...grpc.CallOption) (*RecordDatum, error) {
	out := new(RecordDatum)
	err := c.cc.Invoke(ctx, "/api.grpc.record.Database/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetRecords(ctx context.Context, in *RecordIDs, opts ...grpc.CallOption) (*RecordData, error) {
	out := new(RecordData)
	err := c.cc.Invoke(ctx, "/api.grpc.record.Database/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) UpdateRecord(ctx context.Context, in *RecordDatum, opts ...grpc.CallOption) (*reply.Reply, error) {
	out := new(reply.Reply)
	err := c.cc.Invoke(ctx, "/api.grpc.record.Database/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	GetRecord(context.Context, *RecordID) (*RecordDatum, error)
	GetRecords(context.Context, *RecordIDs) (*RecordData, error)
	UpdateRecord(context.Context, *RecordDatum) (*reply.Reply, error)
}

// UnimplementedDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (*UnimplementedDatabaseServer) GetRecord(ctx context.Context, req *RecordID) (*RecordDatum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedDatabaseServer) GetRecords(ctx context.Context, req *RecordIDs) (*RecordData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (*UnimplementedDatabaseServer) UpdateRecord(ctx context.Context, req *RecordDatum) (*reply.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.record.Database/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetRecord(ctx, req.(*RecordID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.record.Database/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetRecords(ctx, req.(*RecordIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDatum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.record.Database/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).UpdateRecord(ctx, req.(*RecordDatum))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.grpc.record.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _Database_GetRecord_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _Database_GetRecords_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _Database_UpdateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/database/api/grpc/record/record.proto",
}
