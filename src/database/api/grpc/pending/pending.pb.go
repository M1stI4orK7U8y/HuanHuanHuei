// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/database/api/grpc/pending/pending.proto

package pending

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	pending "gitlab.com/packtumi9722/huanhuanhuei/src/database/model/pending"
	reply "gitlab.com/packtumi9722/huanhuanhuei/src/database/model/reply"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PendingItem struct {
	Item                 *pending.Pending `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PendingItem) Reset()         { *m = PendingItem{} }
func (m *PendingItem) String() string { return proto.CompactTextString(m) }
func (*PendingItem) ProtoMessage()    {}
func (*PendingItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00d170c1418ffb4a, []int{0}
}

func (m *PendingItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingItem.Unmarshal(m, b)
}
func (m *PendingItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingItem.Marshal(b, m, deterministic)
}
func (m *PendingItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingItem.Merge(m, src)
}
func (m *PendingItem) XXX_Size() int {
	return xxx_messageInfo_PendingItem.Size(m)
}
func (m *PendingItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingItem.DiscardUnknown(m)
}

var xxx_messageInfo_PendingItem proto.InternalMessageInfo

func (m *PendingItem) GetItem() *pending.Pending {
	if m != nil {
		return m.Item
	}
	return nil
}

type PendingItems struct {
	Items                []*pending.Pending `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PendingItems) Reset()         { *m = PendingItems{} }
func (m *PendingItems) String() string { return proto.CompactTextString(m) }
func (*PendingItems) ProtoMessage()    {}
func (*PendingItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_00d170c1418ffb4a, []int{1}
}

func (m *PendingItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingItems.Unmarshal(m, b)
}
func (m *PendingItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingItems.Marshal(b, m, deterministic)
}
func (m *PendingItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingItems.Merge(m, src)
}
func (m *PendingItems) XXX_Size() int {
	return xxx_messageInfo_PendingItems.Size(m)
}
func (m *PendingItems) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingItems.DiscardUnknown(m)
}

var xxx_messageInfo_PendingItems proto.InternalMessageInfo

func (m *PendingItems) GetItems() []*pending.Pending {
	if m != nil {
		return m.Items
	}
	return nil
}

type ItemID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemID) Reset()         { *m = ItemID{} }
func (m *ItemID) String() string { return proto.CompactTextString(m) }
func (*ItemID) ProtoMessage()    {}
func (*ItemID) Descriptor() ([]byte, []int) {
	return fileDescriptor_00d170c1418ffb4a, []int{2}
}

func (m *ItemID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ItemID.Unmarshal(m, b)
}
func (m *ItemID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ItemID.Marshal(b, m, deterministic)
}
func (m *ItemID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemID.Merge(m, src)
}
func (m *ItemID) XXX_Size() int {
	return xxx_messageInfo_ItemID.Size(m)
}
func (m *ItemID) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemID.DiscardUnknown(m)
}

var xxx_messageInfo_ItemID proto.InternalMessageInfo

func (m *ItemID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PendingItem)(nil), "api.grpc.pending.PendingItem")
	proto.RegisterType((*PendingItems)(nil), "api.grpc.pending.PendingItems")
	proto.RegisterType((*ItemID)(nil), "api.grpc.pending.ItemID")
}

func init() {
	proto.RegisterFile("src/database/api/grpc/pending/pending.proto", fileDescriptor_00d170c1418ffb4a)
}

var fileDescriptor_00d170c1418ffb4a = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x5d, 0xf7, 0x7d, 0x4e, 0x77, 0xe7, 0x44, 0xf2, 0x30, 0x4a, 0x41, 0x19, 0xc5, 0x87, 0xa1,
	0x92, 0xc0, 0xf6, 0x24, 0x08, 0x82, 0x54, 0xc6, 0xde, 0xa4, 0xe0, 0x8b, 0x6f, 0x69, 0x73, 0x2d,
	0x81, 0xb6, 0x09, 0x6d, 0x26, 0xec, 0xaf, 0xfa, 0x6b, 0xa4, 0x4d, 0xca, 0xa6, 0x96, 0xbd, 0x24,
	0x70, 0xee, 0x39, 0xe7, 0x9e, 0x7b, 0xe0, 0xae, 0xae, 0x52, 0x26, 0xb8, 0xe1, 0x09, 0xaf, 0x91,
	0x71, 0x2d, 0x59, 0x56, 0xe9, 0x94, 0x69, 0x2c, 0x85, 0x2c, 0xb3, 0xee, 0xa7, 0xba, 0x52, 0x46,
	0x91, 0x4b, 0xae, 0x25, 0x6d, 0xe6, 0xd4, 0xe1, 0xc1, 0xea, 0x13, 0x4b, 0xa1, 0x2a, 0xd6, 0xce,
	0x93, 0xed, 0x07, 0x93, 0x65, 0x9a, 0x6f, 0x05, 0xb2, 0x4c, 0xa9, 0x2c, 0xc7, 0x3d, 0x8e, 0x85,
	0x36, 0x3b, 0x6b, 0x13, 0xdc, 0xfc, 0xd8, 0x59, 0x28, 0x81, 0x39, 0xab, 0x50, 0xe7, 0x3b, 0xfb,
	0x3a, 0xd6, 0xa2, 0x87, 0xd5, 0x1b, 0x2b, 0x7c, 0x80, 0xc9, 0xab, 0x05, 0x36, 0x06, 0x0b, 0x72,
	0x0b, 0xff, 0xa5, 0xc1, 0xc2, 0xf7, 0xe6, 0xde, 0x62, 0xb2, 0x9c, 0xd1, 0x56, 0xda, 0x25, 0xa6,
	0x8e, 0x19, 0xb7, 0x9c, 0xf0, 0x11, 0xce, 0x0f, 0xa4, 0x35, 0xb9, 0x87, 0x93, 0x06, 0xaf, 0x7d,
	0x6f, 0xfe, 0xef, 0x88, 0xd8, 0x92, 0x42, 0x1f, 0x46, 0x8d, 0x6c, 0x13, 0x91, 0x0b, 0x18, 0x4a,
	0xd1, 0x6e, 0x1c, 0xc7, 0x43, 0x29, 0x96, 0x5f, 0x1e, 0x9c, 0x45, 0x2e, 0x3b, 0x59, 0xc3, 0x64,
	0x8d, 0xc6, 0x69, 0x6b, 0x32, 0xa3, 0xb6, 0x1c, 0xda, 0x95, 0x43, 0x5f, 0x9a, 0x72, 0x82, 0x6b,
	0xfa, 0xbb, 0x5e, 0x7a, 0x98, 0x2d, 0x1c, 0x90, 0x08, 0xa6, 0x6f, 0x5a, 0x70, 0x83, 0x0e, 0x27,
	0x57, 0x47, 0x25, 0x01, 0x71, 0xf1, 0x6d, 0xad, 0x71, 0xf3, 0x86, 0x03, 0xf2, 0x04, 0xd3, 0x08,
	0x73, 0xdc, 0xbb, 0xf8, 0x7f, 0x5d, 0xec, 0x59, 0xfd, 0x06, 0xcf, 0xe3, 0xf7, 0x53, 0xc7, 0x4b,
	0x46, 0xed, 0x0d, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x8d, 0xc7, 0x06, 0x47, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	GetPendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PendingItems, error)
	UpdatePending(ctx context.Context, in *PendingItem, opts ...grpc.CallOption) (*reply.Reply, error)
	DeletePending(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*reply.Reply, error)
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetPendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PendingItems, error) {
	out := new(PendingItems)
	err := c.cc.Invoke(ctx, "/api.grpc.pending.Database/GetPendings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) UpdatePending(ctx context.Context, in *PendingItem, opts ...grpc.CallOption) (*reply.Reply, error) {
	out := new(reply.Reply)
	err := c.cc.Invoke(ctx, "/api.grpc.pending.Database/UpdatePending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) DeletePending(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*reply.Reply, error) {
	out := new(reply.Reply)
	err := c.cc.Invoke(ctx, "/api.grpc.pending.Database/DeletePending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	GetPendings(context.Context, *empty.Empty) (*PendingItems, error)
	UpdatePending(context.Context, *PendingItem) (*reply.Reply, error)
	DeletePending(context.Context, *ItemID) (*reply.Reply, error)
}

// UnimplementedDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (*UnimplementedDatabaseServer) GetPendings(ctx context.Context, req *empty.Empty) (*PendingItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendings not implemented")
}
func (*UnimplementedDatabaseServer) UpdatePending(ctx context.Context, req *PendingItem) (*reply.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePending not implemented")
}
func (*UnimplementedDatabaseServer) DeletePending(ctx context.Context, req *ItemID) (*reply.Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePending not implemented")
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetPendings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetPendings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.pending.Database/GetPendings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetPendings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_UpdatePending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).UpdatePending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.pending.Database/UpdatePending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).UpdatePending(ctx, req.(*PendingItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_DeletePending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).DeletePending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.grpc.pending.Database/DeletePending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).DeletePending(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.grpc.pending.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendings",
			Handler:    _Database_GetPendings_Handler,
		},
		{
			MethodName: "UpdatePending",
			Handler:    _Database_UpdatePending_Handler,
		},
		{
			MethodName: "DeletePending",
			Handler:    _Database_DeletePending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/database/api/grpc/pending/pending.proto",
}
